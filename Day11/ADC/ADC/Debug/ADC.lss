
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000022a  000002be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800112  00800112  000002d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a1a  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000883  00000000  00000000  00000d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a8  00000000  00000000  0000160d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  000019b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042c  00000000  00000000  00001a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002cd  00000000  00000000  00001e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000211d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	8d c0       	rjmp	.+282    	; 0x170 <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	6d d0       	rcall	.+218    	; 0x19e <main>
  c4:	b0 c0       	rjmp	.+352    	; 0x226 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Segment>:
};

unsigned int adc_data = 0;

// 7-Segment 표시 함수
void Segment(int N) {
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
	int i;
	unsigned char N1000, N100, N10, N1;
	int Buff;

	N1000 = N / 1000;
  d0:	68 ee       	ldi	r22, 0xE8	; 232
  d2:	73 e0       	ldi	r23, 0x03	; 3
  d4:	81 d0       	rcall	.+258    	; 0x1d8 <__divmodhi4>
  d6:	8b 01       	movw	r16, r22
	Buff = N % 1000;

	N100 = Buff / 100;
  d8:	64 e6       	ldi	r22, 0x64	; 100
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	7d d0       	rcall	.+250    	; 0x1d8 <__divmodhi4>
  de:	eb 01       	movw	r28, r22
	Buff = Buff % 100;

	N10 = Buff / 10;
	N1 = Buff % 10;
  e0:	6a e0       	ldi	r22, 0x0A	; 10
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	79 d0       	rcall	.+242    	; 0x1d8 <__divmodhi4>

	for (i = 0; i < 30; i++) {
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	3a c0       	rjmp	.+116    	; 0x160 <Segment+0x98>
		PORTC = 0x0E;	// 첫째 자리
  ec:	4e e0       	ldi	r20, 0x0E	; 14
  ee:	45 bb       	out	0x15, r20	; 21
		PORTA = Font[N1000];
  f0:	f8 01       	movw	r30, r16
  f2:	ff 27       	eor	r31, r31
  f4:	e0 50       	subi	r30, 0x00	; 0
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	40 81       	ld	r20, Z
  fa:	4b bb       	out	0x1b, r20	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	ef e9       	ldi	r30, 0x9F	; 159
  fe:	ff e0       	ldi	r31, 0x0F	; 15
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <Segment+0x38>
 104:	00 c0       	rjmp	.+0      	; 0x106 <Segment+0x3e>
 106:	00 00       	nop
		_delay_ms(1);

		PORTC = 0x0D;	// 둘째 자리
 108:	4d e0       	ldi	r20, 0x0D	; 13
 10a:	45 bb       	out	0x15, r20	; 21
		PORTA = Font[N100];
 10c:	fe 01       	movw	r30, r28
 10e:	ff 27       	eor	r31, r31
 110:	e0 50       	subi	r30, 0x00	; 0
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	40 81       	ld	r20, Z
 116:	4b bb       	out	0x1b, r20	; 27
 118:	ef e9       	ldi	r30, 0x9F	; 159
 11a:	ff e0       	ldi	r31, 0x0F	; 15
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <Segment+0x54>
 120:	00 c0       	rjmp	.+0      	; 0x122 <Segment+0x5a>
 122:	00 00       	nop
		_delay_ms(1);

		PORTC = 0x0B;	// 셋째 자리
 124:	4b e0       	ldi	r20, 0x0B	; 11
 126:	45 bb       	out	0x15, r20	; 21
		PORTA = Font[N10];
 128:	fb 01       	movw	r30, r22
 12a:	ff 27       	eor	r31, r31
 12c:	e0 50       	subi	r30, 0x00	; 0
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	40 81       	ld	r20, Z
 132:	4b bb       	out	0x1b, r20	; 27
 134:	ef e9       	ldi	r30, 0x9F	; 159
 136:	ff e0       	ldi	r31, 0x0F	; 15
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <Segment+0x70>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <Segment+0x76>
 13e:	00 00       	nop
		_delay_ms(1);

		PORTC = 0x07;	// 넷째 자리
 140:	47 e0       	ldi	r20, 0x07	; 7
 142:	45 bb       	out	0x15, r20	; 21
		PORTA = Font[N1];
 144:	fc 01       	movw	r30, r24
 146:	ff 27       	eor	r31, r31
 148:	e0 50       	subi	r30, 0x00	; 0
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	40 81       	ld	r20, Z
 14e:	4b bb       	out	0x1b, r20	; 27
 150:	ef e9       	ldi	r30, 0x9F	; 159
 152:	ff e0       	ldi	r31, 0x0F	; 15
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <Segment+0x8c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <Segment+0x92>
 15a:	00 00       	nop
	Buff = Buff % 100;

	N10 = Buff / 10;
	N1 = Buff % 10;

	for (i = 0; i < 30; i++) {
 15c:	2f 5f       	subi	r18, 0xFF	; 255
 15e:	3f 4f       	sbci	r19, 0xFF	; 255
 160:	2e 31       	cpi	r18, 0x1E	; 30
 162:	31 05       	cpc	r19, r1
 164:	1c f2       	brlt	.-122    	; 0xec <Segment+0x24>

		PORTC = 0x07;	// 넷째 자리
		PORTA = Font[N1];
		_delay_ms(1);
	}
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	08 95       	ret

00000170 <__vector_21>:

// ADC 변환 완료 인터럽트 서비스 루틴
ISR(ADC_vect) {
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
	adc_data = ADCW;			 // ADC 결과 저장
 17e:	84 b1       	in	r24, 0x04	; 4
 180:	95 b1       	in	r25, 0x05	; 5
 182:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 186:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	ADCSRA |= (1 << ADSC);		 // 다음 변환 시작
 18a:	86 b1       	in	r24, 0x06	; 6
 18c:	80 64       	ori	r24, 0x40	; 64
 18e:	86 b9       	out	0x06, r24	; 6
}
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <main>:

int main(void) {
	// 7-Segment 출력 포트 설정
	DDRA = 0xFF;	// PORTA = 세그먼트 출력
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
 1a2:	1b ba       	out	0x1b, r1	; 27

	DDRC = 0x0F;	// PORTC 하위 4비트 = 자리 선택 출력
 1a4:	8f e0       	ldi	r24, 0x0F	; 15
 1a6:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x0F;
 1a8:	85 bb       	out	0x15, r24	; 21

	// ADC 포트 설정 (PF0 = ADC0 입력)
	DDRF &= ~(1 << PF0);	// 입력 설정
 1aa:	e1 e6       	ldi	r30, 0x61	; 97
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	8e 7f       	andi	r24, 0xFE	; 254
 1b2:	80 83       	st	Z, r24
	PORTF &= ~(1 << PF0);	// 풀업 끔
 1b4:	e2 e6       	ldi	r30, 0x62	; 98
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	8e 7f       	andi	r24, 0xFE	; 254
 1bc:	80 83       	st	Z, r24

	// ADC 설정
	ADMUX = 0x00;						 // AVCC 기준전압, ADC0 채널
 1be:	17 b8       	out	0x07, r1	; 7
	ADCSRA = (1 << ADEN)  |				 // ADC 활성화
 1c0:	8f e8       	ldi	r24, 0x8F	; 143
 1c2:	86 b9       	out	0x06, r24	; 6
	(1 << ADIE)  |				 // 변환 완료 인터럽트 허용
	(1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // 분주비 128

	sei();								 // 전역 인터럽트 허용
 1c4:	78 94       	sei
	ADCSRA |= (1 << ADSC);				 // 첫 번째 변환 시작
 1c6:	86 b1       	in	r24, 0x06	; 6
 1c8:	80 64       	ori	r24, 0x40	; 64
 1ca:	86 b9       	out	0x06, r24	; 6

	while (1) {
		Segment(adc_data);				 // ADC 값 표시
 1cc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1d0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 1d4:	79 df       	rcall	.-270    	; 0xc8 <Segment>
 1d6:	fa cf       	rjmp	.-12     	; 0x1cc <main+0x2e>

000001d8 <__divmodhi4>:
 1d8:	97 fb       	bst	r25, 7
 1da:	07 2e       	mov	r0, r23
 1dc:	16 f4       	brtc	.+4      	; 0x1e2 <__divmodhi4+0xa>
 1de:	00 94       	com	r0
 1e0:	06 d0       	rcall	.+12     	; 0x1ee <__divmodhi4_neg1>
 1e2:	77 fd       	sbrc	r23, 7
 1e4:	08 d0       	rcall	.+16     	; 0x1f6 <__divmodhi4_neg2>
 1e6:	0b d0       	rcall	.+22     	; 0x1fe <__udivmodhi4>
 1e8:	07 fc       	sbrc	r0, 7
 1ea:	05 d0       	rcall	.+10     	; 0x1f6 <__divmodhi4_neg2>
 1ec:	3e f4       	brtc	.+14     	; 0x1fc <__divmodhi4_exit>

000001ee <__divmodhi4_neg1>:
 1ee:	90 95       	com	r25
 1f0:	81 95       	neg	r24
 1f2:	9f 4f       	sbci	r25, 0xFF	; 255
 1f4:	08 95       	ret

000001f6 <__divmodhi4_neg2>:
 1f6:	70 95       	com	r23
 1f8:	61 95       	neg	r22
 1fa:	7f 4f       	sbci	r23, 0xFF	; 255

000001fc <__divmodhi4_exit>:
 1fc:	08 95       	ret

000001fe <__udivmodhi4>:
 1fe:	aa 1b       	sub	r26, r26
 200:	bb 1b       	sub	r27, r27
 202:	51 e1       	ldi	r21, 0x11	; 17
 204:	07 c0       	rjmp	.+14     	; 0x214 <__udivmodhi4_ep>

00000206 <__udivmodhi4_loop>:
 206:	aa 1f       	adc	r26, r26
 208:	bb 1f       	adc	r27, r27
 20a:	a6 17       	cp	r26, r22
 20c:	b7 07       	cpc	r27, r23
 20e:	10 f0       	brcs	.+4      	; 0x214 <__udivmodhi4_ep>
 210:	a6 1b       	sub	r26, r22
 212:	b7 0b       	sbc	r27, r23

00000214 <__udivmodhi4_ep>:
 214:	88 1f       	adc	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	5a 95       	dec	r21
 21a:	a9 f7       	brne	.-22     	; 0x206 <__udivmodhi4_loop>
 21c:	80 95       	com	r24
 21e:	90 95       	com	r25
 220:	bc 01       	movw	r22, r24
 222:	cd 01       	movw	r24, r26
 224:	08 95       	ret

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
