
CDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000292  00000326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000292  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800112  00800112  00000338  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b01  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c3  00000000  00000000  00000ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f5  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000436  00000000  00000000  00001c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000030f  00000000  00000000  00002042  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002351  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	9e c0       	rjmp	.+316    	; 0x192 <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e9       	ldi	r30, 0x92	; 146
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	7e d0       	rcall	.+252    	; 0x1c0 <main>
  c4:	e4 c0       	rjmp	.+456    	; 0x28e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Segment>:

// ADC 변환된 데이터 저장용 변수 (인터럽트에서 업데이트)
volatile unsigned int adc_data = 0;

// 7-Segment에 4자리 숫자 출력하는 함수
void Segment(int N) {
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	fc 01       	movw	r30, r24
	// 4자리 숫자 분리: 천의 자리, 백의 자리, 십의 자리, 일의 자리
	unsigned char N1000 = N / 1000;
  d6:	68 ee       	ldi	r22, 0xE8	; 232
  d8:	73 e0       	ldi	r23, 0x03	; 3
  da:	b2 d0       	rcall	.+356    	; 0x240 <__divmodhi4>
  dc:	8b 01       	movw	r16, r22
	unsigned char N100 = (N % 1000) / 100;
  de:	24 e6       	ldi	r18, 0x64	; 100
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	ad d0       	rcall	.+346    	; 0x240 <__divmodhi4>
  e6:	eb 01       	movw	r28, r22
	unsigned char N10  = (N % 100) / 10;
  e8:	cf 01       	movw	r24, r30
  ea:	b9 01       	movw	r22, r18
  ec:	a9 d0       	rcall	.+338    	; 0x240 <__divmodhi4>
  ee:	0f 2e       	mov	r0, r31
  f0:	fa e0       	ldi	r31, 0x0A	; 10
  f2:	ef 2e       	mov	r14, r31
  f4:	f1 2c       	mov	r15, r1
  f6:	f0 2d       	mov	r31, r0
  f8:	b7 01       	movw	r22, r14
  fa:	a2 d0       	rcall	.+324    	; 0x240 <__divmodhi4>
  fc:	9b 01       	movw	r18, r22
	unsigned char N1   = N % 10;
  fe:	cf 01       	movw	r24, r30
 100:	b7 01       	movw	r22, r14
 102:	9e d0       	rcall	.+316    	; 0x240 <__divmodhi4>
 104:	40 e0       	ldi	r20, 0x00	; 0

	// 잔상 방지 + 눈에 보이게 반복 출력
	for (int i = 0; i < 80; i++) {
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	3a c0       	rjmp	.+116    	; 0x17e <Segment+0xb6>
 10a:	6e e0       	ldi	r22, 0x0E	; 14
		// 1. 천의 자리 표시
		PORTC = 0x0E;                  // 1110 → 첫 번째 자리 선택
 10c:	65 bb       	out	0x15, r22	; 21
 10e:	f8 01       	movw	r30, r16
		PORTA = Font[N1000];           // 천의 자리 숫자 출력
 110:	ff 27       	eor	r31, r31
 112:	e0 50       	subi	r30, 0x00	; 0
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	60 81       	ld	r22, Z
 118:	6b bb       	out	0x1b, r22	; 27
 11a:	ef e1       	ldi	r30, 0x1F	; 31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	fe e4       	ldi	r31, 0x4E	; 78
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <Segment+0x56>
 122:	00 c0       	rjmp	.+0      	; 0x124 <Segment+0x5c>
 124:	00 00       	nop
 126:	6d e0       	ldi	r22, 0x0D	; 13
		_delay_ms(5);

		// 2. 백의 자리 표시
		PORTC = 0x0D;                  // 1101 → 두 번째 자리 선택
 128:	65 bb       	out	0x15, r22	; 21
 12a:	fe 01       	movw	r30, r28
		PORTA = Font[N100];
 12c:	ff 27       	eor	r31, r31
 12e:	e0 50       	subi	r30, 0x00	; 0
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	60 81       	ld	r22, Z
 134:	6b bb       	out	0x1b, r22	; 27
 136:	ef e1       	ldi	r30, 0x1F	; 31
 138:	fe e4       	ldi	r31, 0x4E	; 78
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <Segment+0x72>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <Segment+0x78>
 140:	00 00       	nop
 142:	6b e0       	ldi	r22, 0x0B	; 11
		_delay_ms(5);

		// 3. 십의 자리 표시
		PORTC = 0x0B;                  // 1011 → 세 번째 자리 선택
 144:	65 bb       	out	0x15, r22	; 21
 146:	f9 01       	movw	r30, r18
		PORTA = Font[N10];
 148:	ff 27       	eor	r31, r31
 14a:	e0 50       	subi	r30, 0x00	; 0
 14c:	ff 4f       	sbci	r31, 0xFF	; 255
 14e:	60 81       	ld	r22, Z
 150:	6b bb       	out	0x1b, r22	; 27
 152:	ef e1       	ldi	r30, 0x1F	; 31
 154:	fe e4       	ldi	r31, 0x4E	; 78
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <Segment+0x8e>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <Segment+0x94>
 15c:	00 00       	nop
 15e:	67 e0       	ldi	r22, 0x07	; 7
		_delay_ms(5);

		// 4. 일의 자리 표시
		PORTC = 0x07;                  // 0111 → 네 번째 자리 선택
 160:	65 bb       	out	0x15, r22	; 21
 162:	fc 01       	movw	r30, r24
		PORTA = Font[N1];
 164:	ff 27       	eor	r31, r31
 166:	e0 50       	subi	r30, 0x00	; 0
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	60 81       	ld	r22, Z
 16c:	6b bb       	out	0x1b, r22	; 27
 16e:	ef e1       	ldi	r30, 0x1F	; 31
 170:	fe e4       	ldi	r31, 0x4E	; 78
 172:	31 97       	sbiw	r30, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <Segment+0xaa>
 176:	00 c0       	rjmp	.+0      	; 0x178 <Segment+0xb0>
 178:	00 00       	nop
 17a:	4f 5f       	subi	r20, 0xFF	; 255
	unsigned char N100 = (N % 1000) / 100;
	unsigned char N10  = (N % 100) / 10;
	unsigned char N1   = N % 10;

	// 잔상 방지 + 눈에 보이게 반복 출력
	for (int i = 0; i < 80; i++) {
 17c:	5f 4f       	sbci	r21, 0xFF	; 255
 17e:	40 35       	cpi	r20, 0x50	; 80
 180:	51 05       	cpc	r21, r1
 182:	1c f2       	brlt	.-122    	; 0x10a <Segment+0x42>
 184:	df 91       	pop	r29
		// 4. 일의 자리 표시
		PORTC = 0x07;                  // 0111 → 네 번째 자리 선택
		PORTA = Font[N1];
		_delay_ms(5);
	}
}
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	ff 90       	pop	r15
 18e:	ef 90       	pop	r14
 190:	08 95       	ret

00000192 <__vector_21>:
 192:	1f 92       	push	r1

// ADC 변환 완료 인터럽트 함수
ISR(ADC_vect) {
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
	adc_data = ADCW;             // 변환된 아날로그 값을 읽어서 저장
 1a0:	84 b1       	in	r24, 0x04	; 4
 1a2:	95 b1       	in	r25, 0x05	; 5
 1a4:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 1a8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	ADCSRA |= (1 << ADSC);       // 다음 ADC 변환 시작
 1ac:	86 b1       	in	r24, 0x06	; 6
 1ae:	80 64       	ori	r24, 0x40	; 64
 1b0:	86 b9       	out	0x06, r24	; 6
}
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <main>:

int main(void) {
	// ----------------------------------
	// 1. 포트 초기화
	// ----------------------------------
	DDRA = 0xFF;        // PORTA (7-Segment 출력) → 출력 모드 설정
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0x0F;        // PORTC (자리 선택용) 하위 4비트 출력
 1c4:	8f e0       	ldi	r24, 0x0F	; 15
 1c6:	84 bb       	out	0x14, r24	; 20
	PORTA = 0x00;       // PORTA 초기화
 1c8:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x0F;       // PORTC 자리 모두 OFF 상태
 1ca:	85 bb       	out	0x15, r24	; 21

	DDRB |= (1 << PB0);     // PB0 릴레이 제어용 → 출력 설정
 1cc:	87 b3       	in	r24, 0x17	; 23
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1 << PB0);   // 릴레이 초기 OFF 상태
 1d2:	88 b3       	in	r24, 0x18	; 24
 1d4:	8e 7f       	andi	r24, 0xFE	; 254
 1d6:	88 bb       	out	0x18, r24	; 24

	// ----------------------------------
	// 2. ADC 설정
	// ----------------------------------
	DDRF &= ~(1 << PF3);    // PF3(ADC3 채널) 입력 설정
 1d8:	e1 e6       	ldi	r30, 0x61	; 97
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	87 7f       	andi	r24, 0xF7	; 247
 1e0:	80 83       	st	Z, r24
	PORTF &= ~(1 << PF3);   // 풀업 저항 비활성화
 1e2:	e2 e6       	ldi	r30, 0x62	; 98
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	87 7f       	andi	r24, 0xF7	; 247
 1ea:	80 83       	st	Z, r24

	ADMUX = (1 << REFS0) | 0x03;
 1ec:	83 e4       	ldi	r24, 0x43	; 67
 1ee:	87 b9       	out	0x07, r24	; 7
	// REFS0 = 1 → AVcc (5V) 기준 전압 사용
	// MUX = 00011 → ADC3 채널 선택 (PF3)

	ADCSRA = (1 << ADEN)  |    // ADC 기능 활성화
 1f0:	8f e8       	ldi	r24, 0x8F	; 143
 1f2:	86 b9       	out	0x06, r24	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	25 e3       	ldi	r18, 0x35	; 53
 1f6:	2a 95       	dec	r18
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <main+0x36>
 1fa:	00 00       	nop
	         (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
	// 분주비 128 → 16MHz / 128 = 125kHz (권장 ADC 클럭)

	_delay_us(10);         // 안정화 시간

	sei();                 // 전역 인터럽트 활성화
 1fc:	78 94       	sei

	ADCSRA |= (1 << ADSC); // 첫 번째 변환 시작
 1fe:	86 b1       	in	r24, 0x06	; 6
 200:	80 64       	ori	r24, 0x40	; 64
 202:	86 b9       	out	0x06, r24	; 6
	// ----------------------------------
	// 3. 메인 루프
	// ----------------------------------
	while (1) {
		// [1] 조도센서 값 표시
		Segment(adc_data);
 204:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 208:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 20c:	5d df       	rcall	.-326    	; 0xc8 <Segment>

		// [2] 릴레이 (FAN) 제어
		PORTB |= (1 << PB0);     // PB0 = HIGH → 릴레이 ON
 20e:	88 b3       	in	r24, 0x18	; 24
 210:	81 60       	ori	r24, 0x01	; 1
 212:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	93 e2       	ldi	r25, 0x23	; 35
 218:	24 ef       	ldi	r18, 0xF4	; 244
 21a:	81 50       	subi	r24, 0x01	; 1
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	20 40       	sbci	r18, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <main+0x5a>
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0x64>
 224:	00 00       	nop
		_delay_ms(5000);         // 5초 동안 동작

		PORTB &= ~(1 << PB0);    // PB0 = LOW → 릴레이 OFF
 226:	88 b3       	in	r24, 0x18	; 24
 228:	8e 7f       	andi	r24, 0xFE	; 254
 22a:	88 bb       	out	0x18, r24	; 24
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	93 ed       	ldi	r25, 0xD3	; 211
 230:	20 e3       	ldi	r18, 0x30	; 48
 232:	81 50       	subi	r24, 0x01	; 1
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	20 40       	sbci	r18, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <main+0x72>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x7c>
 23c:	00 00       	nop
 23e:	e2 cf       	rjmp	.-60     	; 0x204 <main+0x44>

00000240 <__divmodhi4>:
 240:	97 fb       	bst	r25, 7
 242:	07 2e       	mov	r0, r23
 244:	16 f4       	brtc	.+4      	; 0x24a <__divmodhi4+0xa>
 246:	00 94       	com	r0
 248:	06 d0       	rcall	.+12     	; 0x256 <__divmodhi4_neg1>
 24a:	77 fd       	sbrc	r23, 7
 24c:	08 d0       	rcall	.+16     	; 0x25e <__divmodhi4_neg2>
 24e:	0b d0       	rcall	.+22     	; 0x266 <__udivmodhi4>
 250:	07 fc       	sbrc	r0, 7
 252:	05 d0       	rcall	.+10     	; 0x25e <__divmodhi4_neg2>
 254:	3e f4       	brtc	.+14     	; 0x264 <__divmodhi4_exit>

00000256 <__divmodhi4_neg1>:
 256:	90 95       	com	r25
 258:	81 95       	neg	r24
 25a:	9f 4f       	sbci	r25, 0xFF	; 255
 25c:	08 95       	ret

0000025e <__divmodhi4_neg2>:
 25e:	70 95       	com	r23
 260:	61 95       	neg	r22
 262:	7f 4f       	sbci	r23, 0xFF	; 255

00000264 <__divmodhi4_exit>:
 264:	08 95       	ret

00000266 <__udivmodhi4>:
 266:	aa 1b       	sub	r26, r26
 268:	bb 1b       	sub	r27, r27
 26a:	51 e1       	ldi	r21, 0x11	; 17
 26c:	07 c0       	rjmp	.+14     	; 0x27c <__udivmodhi4_ep>

0000026e <__udivmodhi4_loop>:
 26e:	aa 1f       	adc	r26, r26
 270:	bb 1f       	adc	r27, r27
 272:	a6 17       	cp	r26, r22
 274:	b7 07       	cpc	r27, r23
 276:	10 f0       	brcs	.+4      	; 0x27c <__udivmodhi4_ep>
 278:	a6 1b       	sub	r26, r22
 27a:	b7 0b       	sbc	r27, r23

0000027c <__udivmodhi4_ep>:
 27c:	88 1f       	adc	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	5a 95       	dec	r21
 282:	a9 f7       	brne	.-22     	; 0x26e <__udivmodhi4_loop>
 284:	80 95       	com	r24
 286:	90 95       	com	r25
 288:	bc 01       	movw	r22, r24
 28a:	cd 01       	movw	r24, r26
 28c:	08 95       	ret

0000028e <_exit>:
 28e:	f8 94       	cli

00000290 <__stop_program>:
 290:	ff cf       	rjmp	.-2      	; 0x290 <__stop_program>
