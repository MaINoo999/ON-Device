
LED-CDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000002ae  00000342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800112  00800112  00000354  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b10  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000905  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000412  00000000  00000000  00001811  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048b  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000364  00000000  00000000  0000212b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000248f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	8d c0       	rjmp	.+282    	; 0x170 <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ea       	ldi	r30, 0xAE	; 174
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	94 d0       	rcall	.+296    	; 0x1ec <main>
  c4:	f2 c0       	rjmp	.+484    	; 0x2aa <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Segment>:
};

volatile unsigned int adc_data = 0; // ADC 변환값 저장 변수 (ISR에서 수정됨)

// 4자리 7-segment에 숫자 출력 함수
void Segment(int N) {
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
	int i;
	unsigned char N1000, N100, N10, N1;
	int Buff;

	// 4자리 숫자 분리
	N1000 = N / 1000;
  d0:	68 ee       	ldi	r22, 0xE8	; 232
  d2:	73 e0       	ldi	r23, 0x03	; 3
  d4:	b4 d0       	rcall	.+360    	; 0x23e <__divmodhi4>
  d6:	8b 01       	movw	r16, r22
	Buff = N % 1000;
	N100 = Buff / 100;
  d8:	64 e6       	ldi	r22, 0x64	; 100
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	b0 d0       	rcall	.+352    	; 0x23e <__divmodhi4>
  de:	eb 01       	movw	r28, r22
	Buff = Buff % 100;
	N10 = Buff / 10;
	N1 = Buff % 10;
  e0:	6a e0       	ldi	r22, 0x0A	; 10
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	ac d0       	rcall	.+344    	; 0x23e <__divmodhi4>

	// 각 자리별로 30번씩 빠르게 반복 출력 (잔상효과)
	for (i = 0; i < 30; i++) {
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	3a c0       	rjmp	.+116    	; 0x160 <Segment+0x98>
		// 1천 자리
		PORTC = 0x0E;
  ec:	4e e0       	ldi	r20, 0x0E	; 14
  ee:	45 bb       	out	0x15, r20	; 21
		PORTA = Font[N1000];
  f0:	f8 01       	movw	r30, r16
  f2:	ff 27       	eor	r31, r31
  f4:	e0 50       	subi	r30, 0x00	; 0
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	40 81       	ld	r20, Z
  fa:	4b bb       	out	0x1b, r20	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	ef e9       	ldi	r30, 0x9F	; 159
  fe:	ff e0       	ldi	r31, 0x0F	; 15
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <Segment+0x38>
 104:	00 c0       	rjmp	.+0      	; 0x106 <Segment+0x3e>
 106:	00 00       	nop
		_delay_ms(1);

		// 100 자리
		PORTC = 0x0D;
 108:	4d e0       	ldi	r20, 0x0D	; 13
 10a:	45 bb       	out	0x15, r20	; 21
		PORTA = Font[N100];
 10c:	fe 01       	movw	r30, r28
 10e:	ff 27       	eor	r31, r31
 110:	e0 50       	subi	r30, 0x00	; 0
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	40 81       	ld	r20, Z
 116:	4b bb       	out	0x1b, r20	; 27
 118:	ef e9       	ldi	r30, 0x9F	; 159
 11a:	ff e0       	ldi	r31, 0x0F	; 15
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <Segment+0x54>
 120:	00 c0       	rjmp	.+0      	; 0x122 <Segment+0x5a>
 122:	00 00       	nop
		_delay_ms(1);

		// 10 자리
		PORTC = 0x0B;
 124:	4b e0       	ldi	r20, 0x0B	; 11
 126:	45 bb       	out	0x15, r20	; 21
		PORTA = Font[N10];
 128:	fb 01       	movw	r30, r22
 12a:	ff 27       	eor	r31, r31
 12c:	e0 50       	subi	r30, 0x00	; 0
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	40 81       	ld	r20, Z
 132:	4b bb       	out	0x1b, r20	; 27
 134:	ef e9       	ldi	r30, 0x9F	; 159
 136:	ff e0       	ldi	r31, 0x0F	; 15
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <Segment+0x70>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <Segment+0x76>
 13e:	00 00       	nop
		_delay_ms(1);

		// 1 자리
		PORTC = 0x07;
 140:	47 e0       	ldi	r20, 0x07	; 7
 142:	45 bb       	out	0x15, r20	; 21
		PORTA = Font[N1];
 144:	fc 01       	movw	r30, r24
 146:	ff 27       	eor	r31, r31
 148:	e0 50       	subi	r30, 0x00	; 0
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	40 81       	ld	r20, Z
 14e:	4b bb       	out	0x1b, r20	; 27
 150:	ef e9       	ldi	r30, 0x9F	; 159
 152:	ff e0       	ldi	r31, 0x0F	; 15
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <Segment+0x8c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <Segment+0x92>
 15a:	00 00       	nop
	Buff = Buff % 100;
	N10 = Buff / 10;
	N1 = Buff % 10;

	// 각 자리별로 30번씩 빠르게 반복 출력 (잔상효과)
	for (i = 0; i < 30; i++) {
 15c:	2f 5f       	subi	r18, 0xFF	; 255
 15e:	3f 4f       	sbci	r19, 0xFF	; 255
 160:	2e 31       	cpi	r18, 0x1E	; 30
 162:	31 05       	cpc	r19, r1
 164:	1c f2       	brlt	.-122    	; 0xec <Segment+0x24>
		// 1 자리
		PORTC = 0x07;
		PORTA = Font[N1];
		_delay_ms(1);
	}
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	08 95       	ret

00000170 <__vector_21>:

// ADC 변환 완료 인터럽트 서비스 루틴
ISR(ADC_vect) {
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
	adc_data = ADCW;            // ADC 변환 결과 읽기
 17e:	84 b1       	in	r24, 0x04	; 4
 180:	95 b1       	in	r25, 0x05	; 5
 182:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 186:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	ADCSRA |= (1 << ADSC);      // 다음 변환 시작
 18a:	86 b1       	in	r24, 0x06	; 6
 18c:	80 64       	ori	r24, 0x40	; 64
 18e:	86 b9       	out	0x06, r24	; 6
}
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <LED_Display>:

	const int steps = 8;              // LED 8개 사용 (PORTE 0~7)
	unsigned int threshold_min = 80;  // 이 값 이하면 LED 모두 켬 (밝음 기준)
	unsigned int threshold_max = 650; // 이 값 이상이면 LED 모두 끔 (어두움 기준)

	if (adc_val <= threshold_min) {
 19e:	81 35       	cpi	r24, 0x51	; 81
 1a0:	91 05       	cpc	r25, r1
 1a2:	18 f4       	brcc	.+6      	; 0x1aa <LED_Display+0xc>
		PORTE = 0xFF;  // LED 모두 켬 (밝음)
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	83 b9       	out	0x03, r24	; 3
		return;
 1a8:	08 95       	ret
	}

	if (adc_val >= threshold_max) {
 1aa:	8a 38       	cpi	r24, 0x8A	; 138
 1ac:	22 e0       	ldi	r18, 0x02	; 2
 1ae:	92 07       	cpc	r25, r18
 1b0:	10 f0       	brcs	.+4      	; 0x1b6 <LED_Display+0x18>
		PORTE = 0x00;  // LED 모두 끔 (어두움)
 1b2:	13 b8       	out	0x03, r1	; 3
		return;
 1b4:	08 95       	ret
	}

	// adc_val 이 threshold_min~threshold_max 범위 내에 있을 때,
	// 밝기가 낮아질수록 단계별로 LED가 꺼짐
	unsigned int level = (adc_val - threshold_min) * steps / (threshold_max - threshold_min);
 1b6:	80 55       	subi	r24, 0x50	; 80
 1b8:	91 09       	sbc	r25, r1
 1ba:	9c 01       	movw	r18, r24
 1bc:	22 0f       	add	r18, r18
 1be:	33 1f       	adc	r19, r19
 1c0:	22 0f       	add	r18, r18
 1c2:	33 1f       	adc	r19, r19
 1c4:	22 0f       	add	r18, r18
 1c6:	33 1f       	adc	r19, r19
 1c8:	ad e7       	ldi	r26, 0x7D	; 125
 1ca:	b9 e3       	ldi	r27, 0x39	; 57
 1cc:	4b d0       	rcall	.+150    	; 0x264 <__umulhisi3>
 1ce:	9c 01       	movw	r18, r24
 1d0:	22 0f       	add	r18, r18
 1d2:	23 2f       	mov	r18, r19
 1d4:	22 1f       	adc	r18, r18
 1d6:	33 0b       	sbc	r19, r19
 1d8:	31 95       	neg	r19

	// level이 0이면 LED 모두 켜짐, level 7이면 1개만 켜짐
	unsigned char led_pattern = 0xFF << level;
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <LED_Display+0x46>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	2a 95       	dec	r18
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <LED_Display+0x42>

	PORTE = led_pattern;
 1e8:	83 b9       	out	0x03, r24	; 3
 1ea:	08 95       	ret

000001ec <main>:
}

int main(void) {
	// 포트 설정
	DDRA = 0xFF;    // PORTA : 7-segment 숫자 출력 (출력)
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0x0F;    // PORTC : 7-segment 자리 선택 (하위 4비트 출력)
 1f0:	9f e0       	ldi	r25, 0x0F	; 15
 1f2:	94 bb       	out	0x14, r25	; 20
	PORTA = 0x00;
 1f4:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x0F;
 1f6:	95 bb       	out	0x15, r25	; 21

	DDRE = 0xFF;    // PORTE : LED 8개 연결, 출력으로 설정
 1f8:	82 b9       	out	0x02, r24	; 2
	PORTE = 0x00;   // 초기 LED 모두 끔
 1fa:	13 b8       	out	0x03, r1	; 3

	DDRF &= ~(1 << PF3);  // PF3 (ADC3) 입력 설정
 1fc:	e1 e6       	ldi	r30, 0x61	; 97
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	87 7f       	andi	r24, 0xF7	; 247
 204:	80 83       	st	Z, r24
	PORTF &= ~(1 << PF3); // 풀업 저항 비활성화
 206:	e2 e6       	ldi	r30, 0x62	; 98
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	87 7f       	andi	r24, 0xF7	; 247
 20e:	80 83       	st	Z, r24

	// ADC 설정
	ADMUX = (1 << REFS0) | 0x03;      // AVcc 기준, ADC3 채널 선택
 210:	83 e4       	ldi	r24, 0x43	; 67
 212:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN)  |            // ADC 활성화
 214:	8f e8       	ldi	r24, 0x8F	; 143
 216:	86 b9       	out	0x06, r24	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	85 e3       	ldi	r24, 0x35	; 53
 21a:	8a 95       	dec	r24
 21c:	f1 f7       	brne	.-4      	; 0x21a <main+0x2e>
 21e:	00 00       	nop
			 (1 << ADIE)  |            // ADC 변환 완료 인터럽트 활성화
			 (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // 분주비 128

	_delay_us(10);                    // ADC 안정화 대기

	sei();                          // 전역 인터럽트 활성화
 220:	78 94       	sei
	ADCSRA |= (1 << ADSC);          // 첫 번째 ADC 변환 시작
 222:	86 b1       	in	r24, 0x06	; 6
 224:	80 64       	ori	r24, 0x40	; 64
 226:	86 b9       	out	0x06, r24	; 6

	while (1) {
		Segment(adc_data);           // ADC 값을 7-segment에 출력
 228:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 22c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 230:	4b df       	rcall	.-362    	; 0xc8 <Segment>
		LED_Display(adc_data);       // ADC 값에 따라 LED 점등 제어
 232:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 236:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 23a:	b1 df       	rcall	.-158    	; 0x19e <LED_Display>
 23c:	f5 cf       	rjmp	.-22     	; 0x228 <main+0x3c>

0000023e <__divmodhi4>:
 23e:	97 fb       	bst	r25, 7
 240:	07 2e       	mov	r0, r23
 242:	16 f4       	brtc	.+4      	; 0x248 <__divmodhi4+0xa>
 244:	00 94       	com	r0
 246:	06 d0       	rcall	.+12     	; 0x254 <__divmodhi4_neg1>
 248:	77 fd       	sbrc	r23, 7
 24a:	08 d0       	rcall	.+16     	; 0x25c <__divmodhi4_neg2>
 24c:	1a d0       	rcall	.+52     	; 0x282 <__udivmodhi4>
 24e:	07 fc       	sbrc	r0, 7
 250:	05 d0       	rcall	.+10     	; 0x25c <__divmodhi4_neg2>
 252:	3e f4       	brtc	.+14     	; 0x262 <__divmodhi4_exit>

00000254 <__divmodhi4_neg1>:
 254:	90 95       	com	r25
 256:	81 95       	neg	r24
 258:	9f 4f       	sbci	r25, 0xFF	; 255
 25a:	08 95       	ret

0000025c <__divmodhi4_neg2>:
 25c:	70 95       	com	r23
 25e:	61 95       	neg	r22
 260:	7f 4f       	sbci	r23, 0xFF	; 255

00000262 <__divmodhi4_exit>:
 262:	08 95       	ret

00000264 <__umulhisi3>:
 264:	a2 9f       	mul	r26, r18
 266:	b0 01       	movw	r22, r0
 268:	b3 9f       	mul	r27, r19
 26a:	c0 01       	movw	r24, r0
 26c:	a3 9f       	mul	r26, r19
 26e:	70 0d       	add	r23, r0
 270:	81 1d       	adc	r24, r1
 272:	11 24       	eor	r1, r1
 274:	91 1d       	adc	r25, r1
 276:	b2 9f       	mul	r27, r18
 278:	70 0d       	add	r23, r0
 27a:	81 1d       	adc	r24, r1
 27c:	11 24       	eor	r1, r1
 27e:	91 1d       	adc	r25, r1
 280:	08 95       	ret

00000282 <__udivmodhi4>:
 282:	aa 1b       	sub	r26, r26
 284:	bb 1b       	sub	r27, r27
 286:	51 e1       	ldi	r21, 0x11	; 17
 288:	07 c0       	rjmp	.+14     	; 0x298 <__udivmodhi4_ep>

0000028a <__udivmodhi4_loop>:
 28a:	aa 1f       	adc	r26, r26
 28c:	bb 1f       	adc	r27, r27
 28e:	a6 17       	cp	r26, r22
 290:	b7 07       	cpc	r27, r23
 292:	10 f0       	brcs	.+4      	; 0x298 <__udivmodhi4_ep>
 294:	a6 1b       	sub	r26, r22
 296:	b7 0b       	sbc	r27, r23

00000298 <__udivmodhi4_ep>:
 298:	88 1f       	adc	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	5a 95       	dec	r21
 29e:	a9 f7       	brne	.-22     	; 0x28a <__udivmodhi4_loop>
 2a0:	80 95       	com	r24
 2a2:	90 95       	com	r25
 2a4:	bc 01       	movw	r22, r24
 2a6:	cd 01       	movw	r24, r26
 2a8:	08 95       	ret

000002aa <_exit>:
 2aa:	f8 94       	cli

000002ac <__stop_program>:
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <__stop_program>
