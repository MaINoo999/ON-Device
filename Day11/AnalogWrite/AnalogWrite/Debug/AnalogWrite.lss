
AnalogWrite.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800100  00800100  000001e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f4  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000814  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c6  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  0000164c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f8  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000053  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001acb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 31       	cpi	r26, 0x11	; 17
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0f d0       	rcall	.+30     	; 0xc8 <main>
  aa:	5f c0       	rjmp	.+190    	; 0x16a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <isButtonPressed>:
bool buttonPrevState[8] = {false,false,false,false,false,false,false,false};

// 버튼 눌림 여부 확인 함수 (active low, 내부 풀업 사용)
// 눌렸으면 true, 안눌렸으면 false 반환
bool isButtonPressed(uint8_t pin) {
	return !(PINC & (1 << pin));
  ae:	23 b3       	in	r18, 0x13	; 19
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	a9 01       	movw	r20, r18
  b4:	02 c0       	rjmp	.+4      	; 0xba <isButtonPressed+0xc>
  b6:	55 95       	asr	r21
  b8:	47 95       	ror	r20
  ba:	8a 95       	dec	r24
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <isButtonPressed+0x8>
  be:	ca 01       	movw	r24, r20
  c0:	51 e0       	ldi	r21, 0x01	; 1
  c2:	85 27       	eor	r24, r21
}
  c4:	81 70       	andi	r24, 0x01	; 1
  c6:	08 95       	ret

000000c8 <main>:

int main(void) {
	// PORTA 전체를 출력으로 설정 (LED 연결)
	DDRA = 0xFF;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;  // LED 초기 모두 끔
  cc:	1b ba       	out	0x1b, r1	; 27

	// PORTC 전체를 입력으로 설정 (버튼 연결)
	DDRC = 0x00;
  ce:	14 ba       	out	0x14, r1	; 20
	PORTC = 0xFF;  // 내부 풀업 저항 활성화 (버튼 미눌림 시 입력은 HIGH)
  d0:	85 bb       	out	0x15, r24	; 21

	while (1) {
		// 1. 소프트웨어 PWM 출력 처리
		// pwm_step가 0부터 255까지 증가하며,
		// 각 LED 밝기 값과 비교해 ON/OFF 결정
		for (uint8_t i=0; i<8; i++) {
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	22 c0       	rjmp	.+68     	; 0x11a <main+0x52>
			if (brightness[i] > pwm_step)
  d6:	e8 2f       	mov	r30, r24
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	e7 5f       	subi	r30, 0xF7	; 247
  dc:	fe 4f       	sbci	r31, 0xFE	; 254
  de:	20 81       	ld	r18, Z
  e0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <pwm_step>
  e4:	92 17       	cp	r25, r18
  e6:	60 f4       	brcc	.+24     	; 0x100 <main+0x38>
				PORTA |= (1 << i);   // pwm_step보다 밝기가 크면 LED 켜기
  e8:	9b b3       	in	r25, 0x1b	; 27
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	08 2e       	mov	r0, r24
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <main+0x2e>
  f2:	22 0f       	add	r18, r18
  f4:	33 1f       	adc	r19, r19
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <main+0x2a>
  fa:	29 2b       	or	r18, r25
  fc:	2b bb       	out	0x1b, r18	; 27
  fe:	0c c0       	rjmp	.+24     	; 0x118 <main+0x50>
			else
				PORTA &= ~(1 << i);  // 아니면 LED 끄기
 100:	9b b3       	in	r25, 0x1b	; 27
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	08 2e       	mov	r0, r24
 108:	02 c0       	rjmp	.+4      	; 0x10e <main+0x46>
 10a:	22 0f       	add	r18, r18
 10c:	33 1f       	adc	r19, r19
 10e:	0a 94       	dec	r0
 110:	e2 f7       	brpl	.-8      	; 0x10a <main+0x42>
 112:	20 95       	com	r18
 114:	29 23       	and	r18, r25
 116:	2b bb       	out	0x1b, r18	; 27

	while (1) {
		// 1. 소프트웨어 PWM 출력 처리
		// pwm_step가 0부터 255까지 증가하며,
		// 각 LED 밝기 값과 비교해 ON/OFF 결정
		for (uint8_t i=0; i<8; i++) {
 118:	8f 5f       	subi	r24, 0xFF	; 255
 11a:	88 30       	cpi	r24, 0x08	; 8
 11c:	e0 f2       	brcs	.-72     	; 0xd6 <main+0xe>
			else
				PORTA &= ~(1 << i);  // 아니면 LED 끄기
		}

		// PWM 카운터 증가 및 255 넘으면 0으로 리셋
		pwm_step++;
 11e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pwm_step>
 122:	8f 5f       	subi	r24, 0xFF	; 255
 124:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <pwm_step>
		if (pwm_step == 255) pwm_step = 0;
 128:	8f 3f       	cpi	r24, 0xFF	; 255
 12a:	11 f4       	brne	.+4      	; 0x130 <main+0x68>
 12c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pwm_step>

	while (1) {
		// 1. 소프트웨어 PWM 출력 처리
		// pwm_step가 0부터 255까지 증가하며,
		// 각 LED 밝기 값과 비교해 ON/OFF 결정
		for (uint8_t i=0; i<8; i++) {
 130:	c0 e0       	ldi	r28, 0x00	; 0
 132:	18 c0       	rjmp	.+48     	; 0x164 <main+0x9c>

		// 2. 버튼 상태 확인 및 밝기 조절
		// 각 버튼별로 눌림 이벤트(이전 상태는 안눌림, 현재 눌림) 발생 시
		// 해당 LED 밝기를 32만큼 증가시킨 후 255 넘으면 0으로 초기화
		for (uint8_t i=0; i<8; i++) {
			bool pressed = isButtonPressed(i);
 134:	8c 2f       	mov	r24, r28
 136:	bb df       	rcall	.-138    	; 0xae <isButtonPressed>

			// 눌림 이벤트 감지: 이전에는 안눌림이고 현재 눌림일 때만 작동
			if (pressed && !buttonPrevState[i]) {
 138:	88 23       	and	r24, r24
 13a:	71 f0       	breq	.+28     	; 0x158 <main+0x90>
 13c:	2c 2f       	mov	r18, r28
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	f9 01       	movw	r30, r18
 142:	e0 50       	subi	r30, 0x00	; 0
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	90 81       	ld	r25, Z
 148:	91 11       	cpse	r25, r1
 14a:	06 c0       	rjmp	.+12     	; 0x158 <main+0x90>
				brightness[i] += 32;     // 밝기 단계 증가
 14c:	f9 01       	movw	r30, r18
 14e:	e7 5f       	subi	r30, 0xF7	; 247
 150:	fe 4f       	sbci	r31, 0xFE	; 254
 152:	90 81       	ld	r25, Z
 154:	90 5e       	subi	r25, 0xE0	; 224
 156:	90 83       	st	Z, r25
					brightness[i] = 0;   // 최대값 넘으면 0으로 초기화
			}

			// 현재 버튼 상태를 이전 상태 배열에 저장하여
			// 다음 반복 때 눌림 이벤트 감지에 활용
			buttonPrevState[i] = pressed;
 158:	ec 2f       	mov	r30, r28
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	e0 50       	subi	r30, 0x00	; 0
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	80 83       	st	Z, r24
		if (pwm_step == 255) pwm_step = 0;

		// 2. 버튼 상태 확인 및 밝기 조절
		// 각 버튼별로 눌림 이벤트(이전 상태는 안눌림, 현재 눌림) 발생 시
		// 해당 LED 밝기를 32만큼 증가시킨 후 255 넘으면 0으로 초기화
		for (uint8_t i=0; i<8; i++) {
 162:	cf 5f       	subi	r28, 0xFF	; 255
 164:	c8 30       	cpi	r28, 0x08	; 8
 166:	30 f3       	brcs	.-52     	; 0x134 <main+0x6c>
 168:	b4 cf       	rjmp	.-152    	; 0xd2 <main+0xa>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
