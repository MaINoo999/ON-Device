
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000150  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800106  00800106  000001ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000096b  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a6  00000000  00000000  00000c07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032a  00000000  00000000  000014ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  000017d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000426  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000093  00000000  00000000  00001c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001d11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3f c0       	rjmp	.+126    	; 0xc8 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e5       	ldi	r30, 0x50	; 80
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 30       	cpi	r26, 0x07	; 7
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2d d0       	rcall	.+90     	; 0x11e <main>
  c4:	43 c0       	rjmp	.+134    	; 0x14c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_18>:

//--------------------------------------------------------
// USART0 수신 인터럽트 서비스 루틴
// 설명: UART로 데이터가 들어오면 자동 실행됨
//--------------------------------------------------------
ISR(USART0_RX_vect) {
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	rx_buf = UDR0;          // 수신 데이터 레지스터에서 문자 읽어와 rx_buf에 저장
  d4:	8c b1       	in	r24, 0x0c	; 12
  d6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
}
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <usart0_init>:
// 기능: USART0 초기화 (115200bps 기준, 16MHz 클럭)
// 설정: 비동기, 8비트 데이터, 패리티 없음, 1 스탑비트
// 사용: 수신/송신 가능 + 수신 인터럽트 활성화
//--------------------------------------------------------
void usart0_init() {
	UCSR0A = 0x00;          // USART 설정 초기화 (기본값, 변경 없음)
  e6:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0x98;          // RXEN0(수신), TXEN0(송신), RXCIE0(수신 인터럽트) 활성화 → 10011000
  e8:	88 e9       	ldi	r24, 0x98	; 152
  ea:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;          // 비동기 모드, No parity, 1 stop bit, 8-bit data → UCSZ01=1, UCSZ00=1
  ec:	86 e0       	ldi	r24, 0x06	; 6
  ee:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H = 0x00;          // 보레이트 상위 바이트
  f2:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0x07;          // 보레이트 하위 바이트 → 115200bps @ 16MHz 클럭 기준
  f6:	87 e0       	ldi	r24, 0x07	; 7
  f8:	89 b9       	out	0x09, r24	; 9
	sei();                  // 전역 인터럽트 활성화
  fa:	78 94       	sei
  fc:	08 95       	ret

000000fe <USART0_char>:
//--------------------------------------------------------
// 함수명: USART0_char
// 기능: USART0로 문자 1개 송신
//--------------------------------------------------------
void USART0_char(char data) {
	while (!(UCSR0A & 0x20));  // 송신 준비 완료 대기 (UDRE0 비트 확인)
  fe:	5d 9b       	sbis	0x0b, 5	; 11
 100:	fe cf       	rjmp	.-4      	; 0xfe <USART0_char>
	UDR0 = data;               // 데이터 전송
 102:	8c b9       	out	0x0c, r24	; 12
 104:	08 95       	ret

00000106 <USART0_str>:

//--------------------------------------------------------
// 함수명: USART0_str
// 기능: 문자열을 USART0로 전송
//--------------------------------------------------------
void USART0_str(char* str) {
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	ec 01       	movw	r28, r24
	while (*str)               // 문자열 끝(NULL)까지 반복
 10c:	02 c0       	rjmp	.+4      	; 0x112 <USART0_str+0xc>
		USART0_char(*str++);   // 문자 하나씩 송신
 10e:	21 96       	adiw	r28, 0x01	; 1
 110:	f6 df       	rcall	.-20     	; 0xfe <USART0_char>
//--------------------------------------------------------
// 함수명: USART0_str
// 기능: 문자열을 USART0로 전송
//--------------------------------------------------------
void USART0_str(char* str) {
	while (*str)               // 문자열 끝(NULL)까지 반복
 112:	88 81       	ld	r24, Y
 114:	81 11       	cpse	r24, r1
 116:	fb cf       	rjmp	.-10     	; 0x10e <USART0_str+0x8>
		USART0_char(*str++);   // 문자 하나씩 송신
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <main>:
// - USART0 초기화
// - 매초 "Test" 문자열 송신
// - 수신 데이터가 들어오면 다시 그대로 송신 (에코)
//--------------------------------------------------------
int main(void) {
	usart0_init();             // USART0 초기화
 11e:	e3 df       	rcall	.-58     	; 0xe6 <usart0_init>

	while (1) {
		USART0_str("Test\n");  // "Test" 문자열 송신
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	f0 df       	rcall	.-32     	; 0x106 <USART0_str>

		// 수신 버퍼에 데이터가 있으면 (0이 아니면)
		if (rx_buf) {
 126:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 12a:	88 23       	and	r24, r24
 12c:	29 f0       	breq	.+10     	; 0x138 <main+0x1a>
			USART0_char(rx_buf);  // 받은 문자 다시 송신 (에코)
 12e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 132:	e5 df       	rcall	.-54     	; 0xfe <USART0_char>
			rx_buf = 0;           // 수신 버퍼 초기화 (다시 받을 준비)
 134:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	2f e3       	ldi	r18, 0x3F	; 63
 13a:	8d e0       	ldi	r24, 0x0D	; 13
 13c:	93 e0       	ldi	r25, 0x03	; 3
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x20>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x2a>
 148:	00 00       	nop
 14a:	ea cf       	rjmp	.-44     	; 0x120 <main+0x2>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
