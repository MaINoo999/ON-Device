
Timer3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000023e  000002d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800112  00800112  000002e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ff  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087b  00000000  00000000  00000d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ba  00000000  00000000  000015fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000019b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000422  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000024b  00000000  00000000  00001e42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000208d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	91 c0       	rjmp	.+290    	; 0x164 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e3       	ldi	r30, 0x3E	; 62
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	7f d0       	rcall	.+254    	; 0x1c2 <main>
  c4:	ba c0       	rjmp	.+372    	; 0x23a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Segment>:
// 전역 카운터 변수
volatile int t_cnt = 0;
volatile int m_cnt = 0;

// 숫자 표시 함수 (4자리 세그먼트)
void Segment(int num) {
  c8:	cf 93       	push	r28
	unsigned char digits[4];
	int i;

	// 숫자 분해
	digits[0] = num / 1000;
  ca:	68 ee       	ldi	r22, 0xE8	; 232
  cc:	73 e0       	ldi	r23, 0x03	; 3
  ce:	8e d0       	rcall	.+284    	; 0x1ec <__divmodhi4>
  d0:	c6 2f       	mov	r28, r22
	num %= 1000;
	digits[1] = num / 100;
  d2:	64 e6       	ldi	r22, 0x64	; 100
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	8a d0       	rcall	.+276    	; 0x1ec <__divmodhi4>
  d8:	46 2f       	mov	r20, r22
	num %= 100;
	digits[2] = num / 10;
  da:	6a e0       	ldi	r22, 0x0A	; 10
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	86 d0       	rcall	.+268    	; 0x1ec <__divmodhi4>
	digits[3] = num % 10;

	// 4자리 출력 (스캔 방식)
	for (i = 0; i < 50; i++) {
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	3a c0       	rjmp	.+116    	; 0x15a <Segment+0x92>
		PORTC = 0x0E;
  e6:	9e e0       	ldi	r25, 0x0E	; 14
  e8:	95 bb       	out	0x15, r25	; 21
		PORTA = Font[digits[0]];
  ea:	ec 2f       	mov	r30, r28
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	e0 50       	subi	r30, 0x00	; 0
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	90 81       	ld	r25, Z
  f4:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	ef e9       	ldi	r30, 0x9F	; 159
  f8:	ff e0       	ldi	r31, 0x0F	; 15
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <Segment+0x32>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <Segment+0x38>
 100:	00 00       	nop
		_delay_ms(1);

		PORTC = 0x0D;
 102:	9d e0       	ldi	r25, 0x0D	; 13
 104:	95 bb       	out	0x15, r25	; 21
		PORTA = Font[digits[1]];
 106:	e4 2f       	mov	r30, r20
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	e0 50       	subi	r30, 0x00	; 0
 10c:	ff 4f       	sbci	r31, 0xFF	; 255
 10e:	90 81       	ld	r25, Z
 110:	9b bb       	out	0x1b, r25	; 27
 112:	ef e9       	ldi	r30, 0x9F	; 159
 114:	ff e0       	ldi	r31, 0x0F	; 15
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <Segment+0x4e>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <Segment+0x54>
 11c:	00 00       	nop
		_delay_ms(1);

		PORTC = 0x0B;
 11e:	9b e0       	ldi	r25, 0x0B	; 11
 120:	95 bb       	out	0x15, r25	; 21
		PORTA = Font[digits[2]];
 122:	e6 2f       	mov	r30, r22
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	e0 50       	subi	r30, 0x00	; 0
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	90 81       	ld	r25, Z
 12c:	9b bb       	out	0x1b, r25	; 27
 12e:	ef e9       	ldi	r30, 0x9F	; 159
 130:	ff e0       	ldi	r31, 0x0F	; 15
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <Segment+0x6a>
 136:	00 c0       	rjmp	.+0      	; 0x138 <Segment+0x70>
 138:	00 00       	nop
		_delay_ms(1);

		PORTC = 0x07;
 13a:	97 e0       	ldi	r25, 0x07	; 7
 13c:	95 bb       	out	0x15, r25	; 21
		PORTA = Font[digits[3]];
 13e:	e8 2f       	mov	r30, r24
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	e0 50       	subi	r30, 0x00	; 0
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	90 81       	ld	r25, Z
 148:	9b bb       	out	0x1b, r25	; 27
 14a:	ef e9       	ldi	r30, 0x9F	; 159
 14c:	ff e0       	ldi	r31, 0x0F	; 15
 14e:	31 97       	sbiw	r30, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <Segment+0x86>
 152:	00 c0       	rjmp	.+0      	; 0x154 <Segment+0x8c>
 154:	00 00       	nop
	num %= 100;
	digits[2] = num / 10;
	digits[3] = num % 10;

	// 4자리 출력 (스캔 방식)
	for (i = 0; i < 50; i++) {
 156:	2f 5f       	subi	r18, 0xFF	; 255
 158:	3f 4f       	sbci	r19, 0xFF	; 255
 15a:	22 33       	cpi	r18, 0x32	; 50
 15c:	31 05       	cpc	r19, r1
 15e:	1c f2       	brlt	.-122    	; 0xe6 <Segment+0x1e>

		PORTC = 0x07;
		PORTA = Font[digits[3]];
		_delay_ms(1);
	}
}
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <__vector_16>:

// 타이머0 오버플로우 인터럽트
ISR(TIMER0_OVF_vect) {
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	2f 93       	push	r18
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
	TCNT0 = 0xC2;  // 초기값 설정 (256 - 62 = 194 → 0xC2)
 174:	82 ec       	ldi	r24, 0xC2	; 194
 176:	82 bf       	out	0x32, r24	; 50

	t_cnt++;
 178:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <t_cnt>
 17c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <t_cnt+0x1>
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <t_cnt+0x1>
 186:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <t_cnt>
	if (t_cnt >= 1000) {
 18a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <t_cnt>
 18e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <t_cnt+0x1>
 192:	88 3e       	cpi	r24, 0xE8	; 232
 194:	93 40       	sbci	r25, 0x03	; 3
 196:	6c f0       	brlt	.+26     	; 0x1b2 <__vector_16+0x4e>
		t_cnt = 0;
 198:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <t_cnt+0x1>
 19c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <t_cnt>
		m_cnt++;  // 1초마다 증가
 1a0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1a4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 1ae:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	}
}
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <main>:

int main(void) {
	// 포트 설정
	DDRA = 0xFF;  // 7세그먼트 데이터
 1c2:	9f ef       	ldi	r25, 0xFF	; 255
 1c4:	9a bb       	out	0x1a, r25	; 26
	DDRC = 0x0F;  // 디지트 선택
 1c6:	8f e0       	ldi	r24, 0x0F	; 15
 1c8:	84 bb       	out	0x14, r24	; 20
	PORTA = 0xFF;
 1ca:	9b bb       	out	0x1b, r25	; 27
	PORTC = 0x0F;
 1cc:	85 bb       	out	0x15, r24	; 21

	// 타이머 설정 (분주비 256)
	ASSR = 0x00;       // 비동기 타이머 사용 안 함
 1ce:	10 be       	out	0x30, r1	; 48
	TCCR0 = 0x04;      // 분주비 256 (Normal mode)
 1d0:	84 e0       	ldi	r24, 0x04	; 4
 1d2:	83 bf       	out	0x33, r24	; 51
	TIMSK = 0x01;      // Timer0 OVF 인터럽트 허용
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0xC2;      // 1ms 주기용 초기값
 1d8:	82 ec       	ldi	r24, 0xC2	; 194
 1da:	82 bf       	out	0x32, r24	; 50
	TIFR = 0x00;       // 인터럽트 플래그 클리어
 1dc:	16 be       	out	0x36, r1	; 54

	sei();             // 전역 인터럽트 활성화
 1de:	78 94       	sei

	while (1) {
		Segment(m_cnt);  // m_cnt 값을 세그먼트에 출력
 1e0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1e4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 1e8:	6f df       	rcall	.-290    	; 0xc8 <Segment>
 1ea:	fa cf       	rjmp	.-12     	; 0x1e0 <main+0x1e>

000001ec <__divmodhi4>:
 1ec:	97 fb       	bst	r25, 7
 1ee:	07 2e       	mov	r0, r23
 1f0:	16 f4       	brtc	.+4      	; 0x1f6 <__divmodhi4+0xa>
 1f2:	00 94       	com	r0
 1f4:	06 d0       	rcall	.+12     	; 0x202 <__divmodhi4_neg1>
 1f6:	77 fd       	sbrc	r23, 7
 1f8:	08 d0       	rcall	.+16     	; 0x20a <__divmodhi4_neg2>
 1fa:	0b d0       	rcall	.+22     	; 0x212 <__udivmodhi4>
 1fc:	07 fc       	sbrc	r0, 7
 1fe:	05 d0       	rcall	.+10     	; 0x20a <__divmodhi4_neg2>
 200:	3e f4       	brtc	.+14     	; 0x210 <__divmodhi4_exit>

00000202 <__divmodhi4_neg1>:
 202:	90 95       	com	r25
 204:	81 95       	neg	r24
 206:	9f 4f       	sbci	r25, 0xFF	; 255
 208:	08 95       	ret

0000020a <__divmodhi4_neg2>:
 20a:	70 95       	com	r23
 20c:	61 95       	neg	r22
 20e:	7f 4f       	sbci	r23, 0xFF	; 255

00000210 <__divmodhi4_exit>:
 210:	08 95       	ret

00000212 <__udivmodhi4>:
 212:	aa 1b       	sub	r26, r26
 214:	bb 1b       	sub	r27, r27
 216:	51 e1       	ldi	r21, 0x11	; 17
 218:	07 c0       	rjmp	.+14     	; 0x228 <__udivmodhi4_ep>

0000021a <__udivmodhi4_loop>:
 21a:	aa 1f       	adc	r26, r26
 21c:	bb 1f       	adc	r27, r27
 21e:	a6 17       	cp	r26, r22
 220:	b7 07       	cpc	r27, r23
 222:	10 f0       	brcs	.+4      	; 0x228 <__udivmodhi4_ep>
 224:	a6 1b       	sub	r26, r22
 226:	b7 0b       	sbc	r27, r23

00000228 <__udivmodhi4_ep>:
 228:	88 1f       	adc	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	5a 95       	dec	r21
 22e:	a9 f7       	brne	.-22     	; 0x21a <__udivmodhi4_loop>
 230:	80 95       	com	r24
 232:	90 95       	com	r25
 234:	bc 01       	movw	r22, r24
 236:	cd 01       	movw	r24, r26
 238:	08 95       	ret

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
