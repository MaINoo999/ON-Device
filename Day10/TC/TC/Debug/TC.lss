
TC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000001d6  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a01  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000086b  00000000  00000000  00000cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037c  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  000018dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041b  00000000  00000000  00001924  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a8  00000000  00000000  00001d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001fe7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ed       	ldi	r30, 0xD6	; 214
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	56 d0       	rcall	.+172    	; 0x160 <main>
  b4:	8e c0       	rjmp	.+284    	; 0x1d2 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <Segment>:
 * - 입력값 N (0~9999)을 받아서 4자리로 분해하고
 *   7-Segment에 출력하는 함수입니다.
 * - N1000: 천의 자리, N100: 백의 자리
 * - N10: 십의 자리, N1: 일의 자리
 */
void Segment(int N) {
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
    int i;
    unsigned char N1000, N100, N10, N1;
    int Buff;

    // 자리수 분리
    N1000 = N / 1000;
  c0:	68 ee       	ldi	r22, 0xE8	; 232
  c2:	73 e0       	ldi	r23, 0x03	; 3
  c4:	5f d0       	rcall	.+190    	; 0x184 <__divmodhi4>
  c6:	8b 01       	movw	r16, r22
    Buff = N % 1000;

    N100 = Buff / 100;
  c8:	64 e6       	ldi	r22, 0x64	; 100
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	5b d0       	rcall	.+182    	; 0x184 <__divmodhi4>
  ce:	eb 01       	movw	r28, r22
    Buff %= 100;

    N10 = Buff / 10;
    N1 = Buff % 10;
  d0:	6a e0       	ldi	r22, 0x0A	; 10
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	57 d0       	rcall	.+174    	; 0x184 <__divmodhi4>

    // 4자리 반복해서 출력 (잔상 방지 및 가시성 확보)
    for (i = 0; i < 30; i++) {
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	3a c0       	rjmp	.+116    	; 0x150 <Segment+0x98>
        // 1번째 자리: 천의 자리
        PORTC = 0x0E;                 // PC0 LOW (나머지 HIGH)
  dc:	4e e0       	ldi	r20, 0x0E	; 14
  de:	45 bb       	out	0x15, r20	; 21
        PORTA = Font[N1000];         // 폰트 출력
  e0:	f8 01       	movw	r30, r16
  e2:	ff 27       	eor	r31, r31
  e4:	e0 50       	subi	r30, 0x00	; 0
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	40 81       	ld	r20, Z
  ea:	4b bb       	out	0x1b, r20	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	ef e9       	ldi	r30, 0x9F	; 159
  ee:	ff e0       	ldi	r31, 0x0F	; 15
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <Segment+0x38>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <Segment+0x3e>
  f6:	00 00       	nop
        _delay_ms(1);

        // 2번째 자리: 백의 자리
        PORTC = 0x0D;                 // PC1 LOW
  f8:	4d e0       	ldi	r20, 0x0D	; 13
  fa:	45 bb       	out	0x15, r20	; 21
        PORTA = Font[N100];
  fc:	fe 01       	movw	r30, r28
  fe:	ff 27       	eor	r31, r31
 100:	e0 50       	subi	r30, 0x00	; 0
 102:	ff 4f       	sbci	r31, 0xFF	; 255
 104:	40 81       	ld	r20, Z
 106:	4b bb       	out	0x1b, r20	; 27
 108:	ef e9       	ldi	r30, 0x9F	; 159
 10a:	ff e0       	ldi	r31, 0x0F	; 15
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <Segment+0x54>
 110:	00 c0       	rjmp	.+0      	; 0x112 <Segment+0x5a>
 112:	00 00       	nop
        _delay_ms(1);

        // 3번째 자리: 십의 자리
        PORTC = 0x0B;                 // PC2 LOW
 114:	4b e0       	ldi	r20, 0x0B	; 11
 116:	45 bb       	out	0x15, r20	; 21
        PORTA = Font[N10];
 118:	fb 01       	movw	r30, r22
 11a:	ff 27       	eor	r31, r31
 11c:	e0 50       	subi	r30, 0x00	; 0
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	40 81       	ld	r20, Z
 122:	4b bb       	out	0x1b, r20	; 27
 124:	ef e9       	ldi	r30, 0x9F	; 159
 126:	ff e0       	ldi	r31, 0x0F	; 15
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <Segment+0x70>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <Segment+0x76>
 12e:	00 00       	nop
        _delay_ms(1);

        // 4번째 자리: 일의 자리
        PORTC = 0x07;                 // PC3 LOW
 130:	47 e0       	ldi	r20, 0x07	; 7
 132:	45 bb       	out	0x15, r20	; 21
        PORTA = Font[N1];
 134:	fc 01       	movw	r30, r24
 136:	ff 27       	eor	r31, r31
 138:	e0 50       	subi	r30, 0x00	; 0
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	40 81       	ld	r20, Z
 13e:	4b bb       	out	0x1b, r20	; 27
 140:	ef e9       	ldi	r30, 0x9F	; 159
 142:	ff e0       	ldi	r31, 0x0F	; 15
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <Segment+0x8c>
 148:	00 c0       	rjmp	.+0      	; 0x14a <Segment+0x92>
 14a:	00 00       	nop

    N10 = Buff / 10;
    N1 = Buff % 10;

    // 4자리 반복해서 출력 (잔상 방지 및 가시성 확보)
    for (i = 0; i < 30; i++) {
 14c:	2f 5f       	subi	r18, 0xFF	; 255
 14e:	3f 4f       	sbci	r19, 0xFF	; 255
 150:	2e 31       	cpi	r18, 0x1E	; 30
 152:	31 05       	cpc	r19, r1
 154:	1c f2       	brlt	.-122    	; 0xdc <Segment+0x24>
        // 4번째 자리: 일의 자리
        PORTC = 0x07;                 // PC3 LOW
        PORTA = Font[N1];
        _delay_ms(1);
    }
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	08 95       	ret

00000160 <main>:
 */
int main(void) {
    unsigned int m_cnt = 0;

    // 포트 설정
    DDRA = 0xFF;   // PORTA: 세그먼트 숫자 출력용 → 출력 모드
 160:	9f ef       	ldi	r25, 0xFF	; 255
 162:	9a bb       	out	0x1a, r25	; 26
    DDRC = 0x0F;   // PORTC: 세그먼트 자릿수 제어용 (PC0~PC3) → 출력 모드
 164:	8f e0       	ldi	r24, 0x0F	; 15
 166:	84 bb       	out	0x14, r24	; 20

    PORTA = 0xFF;  // PORTA 초기화 (모든 세그먼트 OFF)
 168:	9b bb       	out	0x1b, r25	; 27
    PORTC = 0x0F;  // PORTC 초기화 (모든 자릿수 OFF)
 16a:	85 bb       	out	0x15, r24	; 21

    // Timer1 설정
    // TCCR1B = 0x07 → 분주비 1024, Normal Mode (WGM13:0 = 0000)
    // 16MHz / 1024 = 약 15.6kHz → 1 tick ≈ 64us
    TCCR1B = 0x07;
 16c:	87 e0       	ldi	r24, 0x07	; 7
 16e:	8e bd       	out	0x2e, r24	; 46

    while (1) {
        m_cnt = TCNT1;  // 현재 Timer1 카운터 값 읽기 (0 ~ 65535)
 170:	8c b5       	in	r24, 0x2c	; 44
 172:	9d b5       	in	r25, 0x2d	; 45

        // 7-Segment는 최대 4자리(9999)까지 표시 가능
        if (m_cnt > 9999)
 174:	80 31       	cpi	r24, 0x10	; 16
 176:	27 e2       	ldi	r18, 0x27	; 39
 178:	92 07       	cpc	r25, r18
 17a:	10 f0       	brcs	.+4      	; 0x180 <main+0x20>
            m_cnt = 0;
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0

        Segment(m_cnt);  // 세그먼트로 출력
 180:	9b df       	rcall	.-202    	; 0xb8 <Segment>
    }
 182:	f6 cf       	rjmp	.-20     	; 0x170 <main+0x10>

00000184 <__divmodhi4>:
 184:	97 fb       	bst	r25, 7
 186:	07 2e       	mov	r0, r23
 188:	16 f4       	brtc	.+4      	; 0x18e <__divmodhi4+0xa>
 18a:	00 94       	com	r0
 18c:	06 d0       	rcall	.+12     	; 0x19a <__divmodhi4_neg1>
 18e:	77 fd       	sbrc	r23, 7
 190:	08 d0       	rcall	.+16     	; 0x1a2 <__divmodhi4_neg2>
 192:	0b d0       	rcall	.+22     	; 0x1aa <__udivmodhi4>
 194:	07 fc       	sbrc	r0, 7
 196:	05 d0       	rcall	.+10     	; 0x1a2 <__divmodhi4_neg2>
 198:	3e f4       	brtc	.+14     	; 0x1a8 <__divmodhi4_exit>

0000019a <__divmodhi4_neg1>:
 19a:	90 95       	com	r25
 19c:	81 95       	neg	r24
 19e:	9f 4f       	sbci	r25, 0xFF	; 255
 1a0:	08 95       	ret

000001a2 <__divmodhi4_neg2>:
 1a2:	70 95       	com	r23
 1a4:	61 95       	neg	r22
 1a6:	7f 4f       	sbci	r23, 0xFF	; 255

000001a8 <__divmodhi4_exit>:
 1a8:	08 95       	ret

000001aa <__udivmodhi4>:
 1aa:	aa 1b       	sub	r26, r26
 1ac:	bb 1b       	sub	r27, r27
 1ae:	51 e1       	ldi	r21, 0x11	; 17
 1b0:	07 c0       	rjmp	.+14     	; 0x1c0 <__udivmodhi4_ep>

000001b2 <__udivmodhi4_loop>:
 1b2:	aa 1f       	adc	r26, r26
 1b4:	bb 1f       	adc	r27, r27
 1b6:	a6 17       	cp	r26, r22
 1b8:	b7 07       	cpc	r27, r23
 1ba:	10 f0       	brcs	.+4      	; 0x1c0 <__udivmodhi4_ep>
 1bc:	a6 1b       	sub	r26, r22
 1be:	b7 0b       	sbc	r27, r23

000001c0 <__udivmodhi4_ep>:
 1c0:	88 1f       	adc	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	5a 95       	dec	r21
 1c6:	a9 f7       	brne	.-22     	; 0x1b2 <__udivmodhi4_loop>
 1c8:	80 95       	com	r24
 1ca:	90 95       	com	r25
 1cc:	bc 01       	movw	r22, r24
 1ce:	cd 01       	movw	r24, r26
 1d0:	08 95       	ret

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
