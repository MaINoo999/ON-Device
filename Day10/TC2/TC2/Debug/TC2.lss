
TC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000021e  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800112  00800112  000002c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a1f  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088a  00000000  00000000  00000d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003af  00000000  00000000  0000160d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  000019bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000429  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002cd  00000000  00000000  00001e51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000211e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a1 c0       	rjmp	.+322    	; 0x170 <__vector_11>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e1       	ldi	r30, 0x1E	; 30
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	6c d0       	rcall	.+216    	; 0x19c <main>
  c4:	aa c0       	rjmp	.+340    	; 0x21a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Segment>:
/*
 * Segment 함수
 * - 전달된 4자리 숫자(int N)를 7-Segment에 출력
 * - PORTA: 데이터 (세그먼트 a~g), PORTC: 자릿수 선택 (4개)
 */
void Segment(int N) {
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
    int i;
    unsigned char N1000, N100, N10, N1;
    int Buff;

    // 자리수 분리
    N1000 = N / 1000;
  d0:	68 ee       	ldi	r22, 0xE8	; 232
  d2:	73 e0       	ldi	r23, 0x03	; 3
  d4:	7b d0       	rcall	.+246    	; 0x1cc <__divmodhi4>
  d6:	8b 01       	movw	r16, r22
    Buff = N % 1000;

    N100 = Buff / 100;
  d8:	64 e6       	ldi	r22, 0x64	; 100
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	77 d0       	rcall	.+238    	; 0x1cc <__divmodhi4>
  de:	eb 01       	movw	r28, r22
    Buff %= 100;

    N10 = Buff / 10;
    N1 = Buff % 10;
  e0:	6a e0       	ldi	r22, 0x0A	; 10
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	73 d0       	rcall	.+230    	; 0x1cc <__divmodhi4>

    // 4자리 스캔 반복 (잔상 제거 및 시인성 확보)
    for (i = 0; i < 30; i++) {
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	3a c0       	rjmp	.+116    	; 0x160 <Segment+0x98>
        PORTC = 0x0E; // 천의 자리 선택 (PC0 LOW)
  ec:	4e e0       	ldi	r20, 0x0E	; 14
  ee:	45 bb       	out	0x15, r20	; 21
        PORTA = Font[N1000];
  f0:	f8 01       	movw	r30, r16
  f2:	ff 27       	eor	r31, r31
  f4:	e0 50       	subi	r30, 0x00	; 0
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	40 81       	ld	r20, Z
  fa:	4b bb       	out	0x1b, r20	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	ef e9       	ldi	r30, 0x9F	; 159
  fe:	ff e0       	ldi	r31, 0x0F	; 15
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <Segment+0x38>
 104:	00 c0       	rjmp	.+0      	; 0x106 <Segment+0x3e>
 106:	00 00       	nop
        _delay_ms(1);

        PORTC = 0x0D; // 백의 자리 선택 (PC1 LOW)
 108:	4d e0       	ldi	r20, 0x0D	; 13
 10a:	45 bb       	out	0x15, r20	; 21
        PORTA = Font[N100];
 10c:	fe 01       	movw	r30, r28
 10e:	ff 27       	eor	r31, r31
 110:	e0 50       	subi	r30, 0x00	; 0
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	40 81       	ld	r20, Z
 116:	4b bb       	out	0x1b, r20	; 27
 118:	ef e9       	ldi	r30, 0x9F	; 159
 11a:	ff e0       	ldi	r31, 0x0F	; 15
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <Segment+0x54>
 120:	00 c0       	rjmp	.+0      	; 0x122 <Segment+0x5a>
 122:	00 00       	nop
        _delay_ms(1);

        PORTC = 0x0B; // 십의 자리 선택 (PC2 LOW)
 124:	4b e0       	ldi	r20, 0x0B	; 11
 126:	45 bb       	out	0x15, r20	; 21
        PORTA = Font[N10];
 128:	fb 01       	movw	r30, r22
 12a:	ff 27       	eor	r31, r31
 12c:	e0 50       	subi	r30, 0x00	; 0
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	40 81       	ld	r20, Z
 132:	4b bb       	out	0x1b, r20	; 27
 134:	ef e9       	ldi	r30, 0x9F	; 159
 136:	ff e0       	ldi	r31, 0x0F	; 15
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <Segment+0x70>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <Segment+0x76>
 13e:	00 00       	nop
        _delay_ms(1);

        PORTC = 0x07; // 일의 자리 선택 (PC3 LOW)
 140:	47 e0       	ldi	r20, 0x07	; 7
 142:	45 bb       	out	0x15, r20	; 21
        PORTA = Font[N1];
 144:	fc 01       	movw	r30, r24
 146:	ff 27       	eor	r31, r31
 148:	e0 50       	subi	r30, 0x00	; 0
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	40 81       	ld	r20, Z
 14e:	4b bb       	out	0x1b, r20	; 27
 150:	ef e9       	ldi	r30, 0x9F	; 159
 152:	ff e0       	ldi	r31, 0x0F	; 15
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <Segment+0x8c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <Segment+0x92>
 15a:	00 00       	nop

    N10 = Buff / 10;
    N1 = Buff % 10;

    // 4자리 스캔 반복 (잔상 제거 및 시인성 확보)
    for (i = 0; i < 30; i++) {
 15c:	2f 5f       	subi	r18, 0xFF	; 255
 15e:	3f 4f       	sbci	r19, 0xFF	; 255
 160:	2e 31       	cpi	r18, 0x1E	; 30
 162:	31 05       	cpc	r19, r1
 164:	1c f2       	brlt	.-122    	; 0xec <Segment+0x24>

        PORTC = 0x07; // 일의 자리 선택 (PC3 LOW)
        PORTA = Font[N1];
        _delay_ms(1);
    }
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	08 95       	ret

00000170 <__vector_11>:
/*
 * Timer1 입력 캡처 인터럽트
 * - 외부에서 상승에지(↑)가 발생하면 ICR1에 현재 타이머 값 저장됨
 * - 해당 값을 m_cnt에 저장하여 세그먼트에 표시할 수 있게 함
 */
ISR(TIMER1_CAPT_vect) {
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
    m_cnt = ICR1;  // ICR1 레지스터의 값 → 외부 펄스 간 시간 측정 결과
 17e:	86 b5       	in	r24, 0x26	; 38
 180:	97 b5       	in	r25, 0x27	; 39
 182:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 186:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
    TCNT1 = 0;     // 타이머 초기화 (다음 측정을 위해)
 18a:	1d bc       	out	0x2d, r1	; 45
 18c:	1c bc       	out	0x2c, r1	; 44
}
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <main>:
 * - Timer1: 외부 입력(PD6)의 상승에지 감지 → ICR1에 시간 저장
 * - 세그먼트에 측정된 시간 값(m_cnt) 표시
 */
int main(void) {
    // 포트 설정
    DDRA = 0xFF;   // PORTA: 7-Segment 출력용 (a~g)
 19c:	9f ef       	ldi	r25, 0xFF	; 255
 19e:	9a bb       	out	0x1a, r25	; 26
    DDRC = 0x0F;   // PORTC: 자릿수 선택용 (4자리)
 1a0:	8f e0       	ldi	r24, 0x0F	; 15
 1a2:	84 bb       	out	0x14, r24	; 20
    PORTA = 0xFF;  // 초기화 (모든 세그먼트 OFF)
 1a4:	9b bb       	out	0x1b, r25	; 27
    PORTC = 0x0F;  // 초기화 (모든 자릿수 OFF)
 1a6:	85 bb       	out	0x15, r24	; 21

    // 타이머0 설정 (CTC 모드, 비교 매치 시 토글 출력)
    // -> PB4(OC0)에서 50% 듀티의 사각파 발생
    DDRB = 0x10;         // PB4 (OC0) 출력 설정
 1a8:	80 e1       	ldi	r24, 0x10	; 16
 1aa:	87 bb       	out	0x17, r24	; 23
    TCCR0 = 0x1E;        // CTC 모드, 분주비 256, Compare Match 시 토글
 1ac:	8e e1       	ldi	r24, 0x1E	; 30
 1ae:	83 bf       	out	0x33, r24	; 51
    OCR0 = 150;          // TOP 값 (주기 조절)
 1b0:	86 e9       	ldi	r24, 0x96	; 150
 1b2:	81 bf       	out	0x31, r24	; 49
    TCNT0 = 0;           // 초기값
 1b4:	12 be       	out	0x32, r1	; 50

    // Timer1 입력 캡처 인터럽트 활성화
    TIMSK = (1 << TICIE1);  // 입력 캡처 인터럽트 활성화
 1b6:	80 e2       	ldi	r24, 0x20	; 32
 1b8:	87 bf       	out	0x37, r24	; 55

    // Timer1 설정
    // ICNC1=0(노이즈 제거 없음), ICES1=1(상승에지 감지), CS12=1 → 분주비 256
    // 클럭 = 16MHz / 256 = 62.5kHz → 1 tick ≈ 16μs
    TCCR1B = 0x44;
 1ba:	84 e4       	ldi	r24, 0x44	; 68
 1bc:	8e bd       	out	0x2e, r24	; 46

    sei();  // 전역 인터럽트 허용
 1be:	78 94       	sei

    // 메인 루프
    while (1) {
        Segment(m_cnt);  // 측정된 시간 간격 값을 7세그먼트에 출력
 1c0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1c4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 1c8:	7f df       	rcall	.-258    	; 0xc8 <Segment>
 1ca:	fa cf       	rjmp	.-12     	; 0x1c0 <main+0x24>

000001cc <__divmodhi4>:
 1cc:	97 fb       	bst	r25, 7
 1ce:	07 2e       	mov	r0, r23
 1d0:	16 f4       	brtc	.+4      	; 0x1d6 <__divmodhi4+0xa>
 1d2:	00 94       	com	r0
 1d4:	06 d0       	rcall	.+12     	; 0x1e2 <__divmodhi4_neg1>
 1d6:	77 fd       	sbrc	r23, 7
 1d8:	08 d0       	rcall	.+16     	; 0x1ea <__divmodhi4_neg2>
 1da:	0b d0       	rcall	.+22     	; 0x1f2 <__udivmodhi4>
 1dc:	07 fc       	sbrc	r0, 7
 1de:	05 d0       	rcall	.+10     	; 0x1ea <__divmodhi4_neg2>
 1e0:	3e f4       	brtc	.+14     	; 0x1f0 <__divmodhi4_exit>

000001e2 <__divmodhi4_neg1>:
 1e2:	90 95       	com	r25
 1e4:	81 95       	neg	r24
 1e6:	9f 4f       	sbci	r25, 0xFF	; 255
 1e8:	08 95       	ret

000001ea <__divmodhi4_neg2>:
 1ea:	70 95       	com	r23
 1ec:	61 95       	neg	r22
 1ee:	7f 4f       	sbci	r23, 0xFF	; 255

000001f0 <__divmodhi4_exit>:
 1f0:	08 95       	ret

000001f2 <__udivmodhi4>:
 1f2:	aa 1b       	sub	r26, r26
 1f4:	bb 1b       	sub	r27, r27
 1f6:	51 e1       	ldi	r21, 0x11	; 17
 1f8:	07 c0       	rjmp	.+14     	; 0x208 <__udivmodhi4_ep>

000001fa <__udivmodhi4_loop>:
 1fa:	aa 1f       	adc	r26, r26
 1fc:	bb 1f       	adc	r27, r27
 1fe:	a6 17       	cp	r26, r22
 200:	b7 07       	cpc	r27, r23
 202:	10 f0       	brcs	.+4      	; 0x208 <__udivmodhi4_ep>
 204:	a6 1b       	sub	r26, r22
 206:	b7 0b       	sbc	r27, r23

00000208 <__udivmodhi4_ep>:
 208:	88 1f       	adc	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	5a 95       	dec	r21
 20e:	a9 f7       	brne	.-22     	; 0x1fa <__udivmodhi4_loop>
 210:	80 95       	com	r24
 212:	90 95       	com	r25
 214:	bc 01       	movw	r22, r24
 216:	cd 01       	movw	r24, r26
 218:	08 95       	ret

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
